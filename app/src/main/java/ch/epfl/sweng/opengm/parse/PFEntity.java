package ch.epfl.sweng.opengm.parse;

import android.os.Parcel;
import android.os.Parcelable;

import com.parse.ParseObject;

import java.util.Date;

import static ch.epfl.sweng.opengm.events.Utils.stringToDate;

/**
 * This abstract class represents an abstraction of an object that is stored on the server.
 * Each table online must be associated with its own class which extends this one.
 */
abstract class PFEntity implements Parcelable {

    protected final String mId;
    private final String mParseTable;

    protected Date lastModified;

    protected PFEntity(Parcel in, String tableName) {
        this(in.readString(), tableName, stringToDate(in.readString()));
    }

    /**
     * @param id           The id generated by the server for this object
     * @param tableName    The table this entity is retrieved from
     * @param lastModified A date corresponding to the last time the entity was modified on the server
     */
    protected PFEntity(String id, String tableName, Date lastModified) {
        if (id == null || id.isEmpty()) {
            throw new IllegalArgumentException("Id is null or empty");
        }
        if (tableName == null || tableName.isEmpty()) {
            throw new IllegalArgumentException("Table name is null or empty");
        }
        if (lastModified == null) {
            throw new IllegalArgumentException("Last updated date is null");
        }
        mId = id;
        mParseTable = tableName;
        this.lastModified = lastModified;
    }

    /**
     * @return the id of the current entity
     */
    public String getId() {
        return this.mId;
    }

    /**
     * This method returns true if the server contains a more recent object than the one we use here
     *
     * @param object the object we retireve from server
     * @return a boolean value which tells us if the object has been modified on the server
     */
    protected boolean hasBeenModified(ParseObject object) {
        return object.getUpdatedAt().after(lastModified);
    }

    /**
     * Setter for the last updated date
     *
     * @param object The parseobject retrieved from the server which contains an updated date
     */
    protected void setLastModified(ParseObject object) {
        this.lastModified = object.getUpdatedAt();
    }

    /**
     * This abstract method must be redefined by each entity to update the current entity by
     * reloading the object with the server information if needed
     *
     * @throws PFException If someting went wrong while retrieving the information on the server
     */
    public abstract void reload() throws PFException;

    /**
     * This method updates in background the data but only the information which have changed since the last time
     *
     * @param entry The entry to be updated in the current table
     * @throws PFException If the server cannot be reach, if the object for this id is not found or if another parse exception happens
     */
    protected abstract void updateToServer(String entry) throws PFException;

    @Override
    public String toString() {
        return "[parseTable = " + mParseTable + " | id = " + mId + " ]";
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        PFEntity that = (PFEntity) o;
        return mId.equals(that.mId) && mParseTable.equals(that.mParseTable);

    }

    @Override
    public int hashCode() {
        int result = mId.hashCode();
        result = 31 * result + mParseTable.hashCode();
        return result;
    }

}